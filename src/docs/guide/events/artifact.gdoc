An extensible Events DSL is available in *grails-app/conf* for routing configuration.
This artifact does detail behaviors of *event* method by selecting topics and namespaces to apply :
* Filtering
* Disabling
* _Extensions_
* _Security_
* _Declarations_

{note}
The DSL is intended to evolve. One of the most wanted features is topic/namespace declaration: assigning a definition
 to a property would generate an injectable eponym bean with streaming methods.
{note}

The DSL requires to assign a closure to an *events* variable.
Each call is a definition, the method name is parsed as a topic name and key/value arguments are definitions attributes.
Wildcard topics/namespaces are supported as well.

An *Events* artifact is a script with some bound variables:
{table}
*Variable* | *Description*
grailsApplication | Grails application object, retrieves artifacts, context etc.
ctx | Spring context, useful for beans access, e.g. _ctx.myService.method()_
config | Configuration object
{table}


{html:groovy}
events = {
    //prevents any events in gorm namespace
    '*' namespace:'gorm', disabled:true

    //filters any events on 'testTopic' where data <= 2
    testTopic filter:{it > 2}

    //filters any events on 'testTopic2' where data is not a TestTopic class type
    testTopic2 filter:TestTopic

    //filters any events on 'testTopicX' using boolean method from service
    testTopicX filter:ctx.myService.&someMethod

    //only if using events-push plugin, allows client-side listener on this topic
    testTopic3 browser:true

    //-------------- roadmap --------------

    //not yet implemented: Assigning and merging definitions
    //myTopic = testTopic4(filter:{i>2})
    //myTopic = testTopic4(filter:{i<4})

    //not yet implemented: Enabling security context for target listeners
    //testTopic5 secured:true

    //not yet implemented: Forwarding
    //testTopic6 to:'anotherTopic'

    //not yet implemented: Global Error Handling, Global Reply Handling
    //testTopic8 onError:{}, onReply:{}
    //testTopic9 onError:'anotherTopicErrors', onReply:'anotherTopicReplies'
}
{html}